class Solution {
    public String findLexSmallestString(String s, int a, int b) {
        // Set to keep track of visited strings to avoid processing duplicates
        Set<String> visited = new HashSet<>();
        
        // Variable to store the lexicographically smallest string found so far
        String smallest = s;
        
        // Queue for BFS traversal of all possible strings generated by operations
        Deque<String> queue = new ArrayDeque<>();
        
        // Initialize the queue and visited set with the original string
        queue.offer(s);
        visited.add(s);
        
        // BFS loop to explore all reachable strings
        while (!queue.isEmpty()) {
            // Get the current string from the queue
            String curr = queue.poll();
            
            // Update smallest if current string is lexicographically smaller
            if (curr.compareTo(smallest) < 0) {
                smallest = curr;
            }
            
            // Operation 1: Add 'a' to every digit at odd indices (1-based)
            StringBuilder sb = new StringBuilder(curr);
            for (int i = 1; i < sb.length(); i += 2) {
                // Convert char digit to int, add 'a', mod 10, convert back to char
                sb.setCharAt(i, (char) ((sb.charAt(i) - '0' + a) % 10 + '0'));
            }
            String added = sb.toString();
            
            // If this new string hasn't been visited, add it to queue and visited set
            if (visited.add(added)) {
                queue.offer(added);
            }
            
            // Operation 2: Rotate the string to the right by 'b' positions
            String rotated = curr.substring(curr.length() - b) + curr.substring(0, curr.length() - b);
            
            // If rotated string is new, add it to queue and visited set
            if (visited.add(rotated)) {
                queue.offer(rotated);
            }
        }
        
        // After exploring all possibilities, return the lexicographically smallest string found
        return smallest;
    }
}
